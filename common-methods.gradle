import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.xml.sax.SAXException;

def getVersion(path) {

	//check nuspec version
	File f = new File(path);
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	try {

		Document doc = dBuilder.parse(f);

		doc.getDocumentElement().normalize();
		def value = doc.getElementsByTagName("version").item(0).getTextContent();
		return value.replaceAll("(\\r|\\n|\\r\\n)+", "").trim();
	} catch(IOException| SAXException | IllegalArgumentException e)  {

		return null
	}

}

def getAssemblyVersion(path) {

	// check c# assembly version
	File f = new File(path);
	def line
	def version = "0.0.0"
	f.withReader { reader ->
	    while ((line = reader.readLine())!=null) {
	    	if( (line =~ /AssemblyVersion\("(\d\.\d\.\d)/) ) {
	    		version = (line =~ /AssemblyVersion\("(\d\.\d\.\d)/)[0][1]
	    		break;
	    	}
	    }
	}

	return version
}


def getVersionNupkg(path) {

	FileTree tree = fileTree(dir: path, include: '*.nupkg')
	Set<File> nupkgFiles = tree.getFiles()

	if(nupkgFiles.size() == 1) {

		File f = null
		nupkgFiles.each { file -> f = file }

		def version = (f.name =~ /.*(\d\.\d\.\d)/)[0][1]

		if(version != null) {

			return version

		} else {
			println "Invalide .nupkg version number."
		}

	} else {

		println nupkgFiles.size()
		println "Incorrect number of .nupkg files."

	}

	return "0.0.0"
}

def parseVersion(versionStr) {
	return versionStr.replaceAll('\\.', '')
}

def getCurrentDir() { 
	return file()
}

def isUpdatedVersion(nupkgVersion, nuspecVersion) {
	return !nupkgVersion.equals(nuspecVersion)
}

def isUpdatedVersionTwo(assemblyVersion, nupkgVersion) {
	println 'c# : ' + assemblyVersion
	println 'nupkg : ' + nupkgVersion
	return parseVersion(assemblyVersion) > parseVersion(nupkgVersion)
}

def getIntAssemblyVersion(path) {

	def strVersion = getAssemblyVersion(path)
	return parseVersion(strVersion)
}

def getIntVersionNupkg(path) {

	def strVersion = getVersionNupkg(path)
	return parseVersion(strVersion)
}

ext {

	getVersion = this.&getVersion
	getVersionNupkg = this.&getVersionNupkg
	getCurrentDir = this.&getCurrentDir
	isUpdatedVersion = this.&isUpdatedVersion
	getAssemblyVersion = this.&getAssemblyVersion
	getIntAssemblyVersion = this.&getIntAssemblyVersion
	getIntVersionNupkg = this.&getIntVersionNupkg
	isUpdatedVersionTwo = this.&isUpdatedVersionTwo
}